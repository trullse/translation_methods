(defun nth-element (lst index)
    (if (= index 0)
        (car lst)
        (nth-element (cdr lst) (- index 1))))

(defun sum-of-mult (row1 row2 sum ind max)
    (if (= ind max)
        sum
        (progn
            (setq sum (+ sum (* (nth-element row1 ind) (nth-element row2 ind))))
            (sum-of-mult row1 row2 sum (+ ind 1) max))))

(defvar i 0)
(defvar j 0)
(defvar cur-row (list))
(defvar cur-col (list))

(defun dot-matrix-internal (m1 m2 max-ind ind row row-ind res)
    (if (= ind max-ind) ; if the end
        (push res row)  ; return result matrix
        (progn
            (setq i (truncate ind 3))
            (setq j (mod ind 3))
            (if (> i row-ind)   ; if the row index changes
                (progn
                    (setq res (push res row))  ; add into result matrix
                    (setq row-ind i)
                    (setq row (list)))
                (+ 0 0))
            (setq cur-row (nth-element m1 i))
            (setq cur-col (nth-element m2 j))
            (setq row (push row (sum-of-mult cur-row cur-col 0 0 3)))
            (dot-matrix-internal m1 m2 max-ind (+ ind 1) row row-ind res))))

(defun dot-matrix (mat1 mat2)
    (dot-matrix-internal mat1 mat2 9 0 (list) 0 (list)))

(defvar matrix1 (list (list 1 0 5) (list 3 7 2) (list 4 3 5)))
(defvar matrix2 (list (list 5 4 3) (list 0 1 5) (list 3 2 1)))

(print (dot-matrix matrix1 matrix2))
